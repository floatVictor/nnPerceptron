//comments generated by chatGPT

NeuralNetwork nn;
float[][] X = new float[2][4];
float[][] Y = new float[2][1];

float ratio1;
float ratio2;
float phase1;
float phase2;

float x, y, target, x2, y2, target2;
int targetY, targetY2;

//number of training input during setup()
int nbTrain = 600000;
//learning rate of the network
float learningRate = 0.03;

// Particle properties
int size = 1;
int hue1;
int hue2;
float sat = 100;
int satOff = 40;
int val = 200;
int opa = 100;

//amplitude of noise displacement
float noiseDisplaceX = 300;
float noiseDisplaceY = 50;

//noise ratios
float noiseRatioX = 0.006;
float noiseRatioY = 0.007;

float p2OffX = 1.2;
float p2OffY = .2;

Particule p, p2;

void setup() {
  // Initialize Neural Network
  nn = new NeuralNetwork(4, 12, 1);
  
  hue1 = (int)random(255);
  hue2 = (hue1 + 255/3) % 255;
  
  ratio1 = random(0, 3);
  ratio2 = random(-6, 0);
  phase1 = random(-1, 1);
  phase2 = random(-0.5, 0.5);
  
  background(2);
  size(1800,1000);
  colorMode(HSB, 255);
  frameRate(8000);
  noStroke();
  
  // Train the neural network on a set of random data
  for(int i = 0; i < nbTrain; i++) {
    x = random(-2, 2);
    y = random(-1, 1);
    target = func(x);
    
    // Set the input values for the network
    X[0][0] = x;
    X[0][1] = y;
    X[0][2] = cos(ratio1 * x);
    X[0][3] = ratio2 - x;
    
    if (y > target) targetY = 1;
    else targetY = -1;
    Y[0][0] = targetY;
    
    // Train the network on the sample
    nn.train(X[0], Y[0]);
  }
}

void draw() {
  
  x = random(-2, 2);
  y = random(-1.8, 1.8);
  target = func(x);
  
  x2 = x + random(-p2OffX, p2OffX);
  y2 = y +random(-p2OffY, p2OffY);
  target2 = func(x2);
  
  // Set the input values for the network
  X[0][0] = x;
  X[0][1] = y;
  X[0][2] = cos(ratio1 * x);
  X[0][3] = ratio2 - x;
  
  X[1][0] = x2;
  X[1][1] = y2;
  X[1][2] = cos(ratio1 * x2);
  X[1][3] = ratio2 - x2;
  
  // Set the target output values for the network
  if (y > target) targetY = 1;
  else targetY = -1;
  
  if (y > target2) targetY2 = 1;
  else targetY2 = -1;
  
  Y[0][0] = targetY;
  Y[1][0] = targetY2;
  
  // Map the input and target values to screen coordinates
  x = map(x, -2, 2, 0, width);
  x2 = map(x2, -2 - p2OffX, 2 + p2OffX, 0, width);
  target = map(target, -1, 1, height * .8, height *.2);
  target2 = map(target2, -1, 1, height * .8, height *.2);
  
  // Draw the line and rectangle
  stroke(255, noise(x * .08) * 8);
  fill(255, noise(x * .08) * 1);
  strokeWeight(1);
  line(x, target, x2, target2);
  rect(x, target, noise(x * .02) * 97, noise(x * .02) * 97);
  
  // Get the prediction from the neural network
  FloatList prediction = nn.predict(X[0]);
  FloatList prediction2 = nn.predict(X[1]);
  
  // Map the input values to screen coordinates
  float xi = map((float)X[0][0], -2, 2, 0, width);
  float yi = map((float)X[0][1], -1.8, 1.8, height, 0);
  float error = abs((float)(yi - target));
  
  float xi2 = map((float)X[1][0], -2 - p2OffX, 2 + p2OffX, 0, width);
  float yi2 = map((float)X[1][1], -2 - p2OffY, 2 + p2OffY, height, 0);
  float error2 = abs((float)(yi2 - target2));
  
  // Draw the particles
  if (prediction.get(0) > 0.5 ) p = new Particule(xi, yi, 1, map(error, 0, width, 1, 0));
  else p = new Particule(xi, yi, -1, map(error, 0, width, 1, 0));
  
  if (prediction2.get(0) > 0.5 ) p2 = new Particule(xi2, yi2, 1, map(error2, 0, width, 1, 0));
  else p2 = new Particule(xi2, yi2, -1, map(error2, 0, width, 1, 0));
  p.display(x, target);
  
  // Train the network on the sample data
  nn.train(X[0], Y[0]);
  nn.train(X[1], Y[1]);
}

float func(float x) {
 return  cos(cos(ratio1*x) * (ratio2 - x))  ;
}

void keyPressed() {
  if (key == 'r') {
    setup();
  }
}
